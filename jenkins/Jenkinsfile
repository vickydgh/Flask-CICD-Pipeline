pipeline {
    agent any

    environment {
        AWS_REGION    = "us-east-2"
        ECR_REPO      = "050752643577.dkr.ecr.us-east-2.amazonaws.com/flask-app"
        IMAGE_TAG     = "latest"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-creds',   // your GitHub PAT credential ID
                    url: 'https://github.com/vickydgh/Flask-CICD-Pipeline.git'
            }
        }

        stage('Build & Push Docker') {
            steps {
                script {
                    echo "Logging in to AWS ECR..."

                    withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
                        sh """
                            # Authenticate Docker to ECR
                            aws ecr get-login-password --region ${AWS_REGION} \
                                | docker login --username AWS --password-stdin ${ECR_REPO}

                            echo "Building Docker image..."
                            docker build -t flask-app:${IMAGE_TAG} ./app

                            echo "Tagging Docker image..."
                            docker tag flask-app:${IMAGE_TAG} ${ECR_REPO}:${IMAGE_TAG}

                            echo "Pushing Docker image to ECR..."
                            docker push ${ECR_REPO}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
                        sh """
                            echo "Updating Kubeconfig..."
                            aws eks update-kubeconfig --region ${AWS_REGION} --name devops-eks

                            echo "Deploying to EKS..."
                            kubectl apply -f k8s/deployment.yaml
                            kubectl apply -f k8s/service.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful!"
        }
        failure {
            echo "❌ Deployment failed!"
        }
    }
}
